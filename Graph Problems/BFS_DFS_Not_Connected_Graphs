package Graphs;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class BFS_DFS_Not_Connected_Graphs {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		
		int n=sc.nextInt();
		int e=sc.nextInt();
		
		int graph[][]=new int[n][n];
		
		for(int i=0;i<e;i++)
		{
			int x=sc.nextInt();
			int y=sc.nextInt();
			
			graph[x][y]=1;
			graph[y][x]=1;
		}
		
		
		System.out.println("DFS Not Connected\n");
		print_nonc_DFS(graph,n);
		System.out.println("BFS\n");
		print_nonc_BFS(graph,n);
		
		sc.close();
	}

	private static void print_nonc_DFS(int[][] graph, int n) {
		// TODO Auto-generated method stub
		int varr1[]=new int[n];
		
		for(int i=0;i<n;i++)
		{
			if(varr1[i]==0)
				printDFS(graph, n, i, varr1);
		}
	}
	
	
	private static void print_nonc_BFS(int[][] graph, int n) {
		// TODO Auto-generated method stub
		int varr2[]=new int[n];
		Queue<Integer> q=new LinkedList<Integer>();
		
		for(int i=0;i<n;i++)
		{
			if(varr2[i]==0)
				printBFS(graph, n, i, varr2,q);
		}
	}

	private static void printDFS(int[][] graph, int n, int s, int[] varr) {
		// TODO Auto-generated method stub
		System.out.println(s+" ");
		varr[s]=1;
		
		for(int i=0;i<n;i++)
			{
				if(i==s)
					continue;
				
				if(graph[s][i]==1 && varr[i]==0)
					printDFS(graph, n, i, varr);
				
			}
		
		}
	
	private static void printBFS(int [][]graph,int n,int s,int[] varr,Queue<Integer> q)
	{
		System.out.println(s);
		varr[s]=1;
		
		for(int i=0;i<n;i++)
		{
			if(i==s)
				continue;
			
			if(graph[s][i]==1 && varr[i]==0)
			{
				if(!q.contains(i))
					q.add(i);
				
			}
			
		}
		
		while(!q.isEmpty())
		{
			printBFS(graph, n, q.remove(), varr, q);
		}
		
	}
}
