package BacktrackMergeBinarySearch;
import java.util.*;
public class sudokuSolver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int[][] arr = 
			    { 
			            {3, 0, 6, 5, 0, 8, 4, 0, 0}, 
			            {5, 2, 0, 0, 0, 0, 0, 0, 0}, 
			            {0, 8, 7, 0, 0, 0, 0, 3, 1}, 
			            {0, 0, 3, 0, 1, 0, 0, 8, 0}, 
			            {9, 0, 0, 8, 6, 3, 0, 0, 5}, 
			            {0, 5, 0, 0, 9, 0, 6, 0, 0}, 
			            {1, 3, 0, 0, 0, 0, 2, 5, 0}, 
			            {0, 0, 0, 0, 0, 0, 0, 7, 4}, 
			            {0, 0, 5, 2, 0, 6, 3, 0, 0} 
			    }; 
		
		
		
		if(solver(arr,9))
		{
			for(int i=0;i<arr.length;i++)
			{
				for(int j=0;j<arr.length;j++)
					System.out.print(arr[i][j]+" ");
				
				System.out.println();
			}
		}
		
		else
			System.out.println("NO SOLUTION");
		
		sc.close();
	}

	private static boolean solver(int[][] arr,int n) {
		// TODO Auto-generated method stub
		int i=0;
		int j=0;
		boolean isEmpty=false;
		
		// finding every empty position and fill it instantly and then again calling solver function on remaining part.
		for(int row=0;row<9;row++)
		{
			for(int col=0;col<9;col++)
			{
				if(arr[row][col]==0)
				{
					i=row;
					j=col;
					
					isEmpty=false;
					break;
				}
			}
			
			if(!isEmpty)
			{
				break;
			}
		}
		
		if(isEmpty)
		{
			return true;
		}
		
		for(int num=1;num<=n;num++)
		{
			if(checknum(arr, i, j, num))
			{
				arr[i][j]=num;
				
				if(solver(arr, n))
					return true;
				
				else
					arr[i][j]=0;
			}
		
		}
		
		return false;
	}

	private static boolean checknum(int arr[][],int row, int col, int num) {
		// TODO Auto-generated method stub
			
		//check in the row
		for(int j=0;j<arr.length;j++)
		{
			if(arr[row][j]==num)
			{
				return false;
			}
		}
		
		//check in column
		for(int j=0;j<arr.length;j++)
		{
			if(arr[j][row]==num)
			{
				return false;
			}
		}
		
		//check in square box(Geeks for Geeks)
		// corresponding square has 
	    // unique number (box-clash) 
	    int sqrt = (int) Math.sqrt(arr.length); 
	    int boxRowStart = row - row % sqrt; 
	    int boxColStart = col - col % sqrt; 
	  
	    for (int r = boxRowStart;r < boxRowStart + sqrt; r++)  
	    { 
	        for (int d = boxColStart;d < boxColStart + sqrt; d++)  
	        { 
	            if (arr[r][d] == num)  
	            { 
	                return false; 
	            } 
	        } 
	    } 
		
		
		return true;
	}
	
	

}
