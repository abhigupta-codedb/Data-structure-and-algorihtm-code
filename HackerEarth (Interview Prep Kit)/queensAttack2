package Practice;
// throwing out of memory exception for large inputs;
public class gfg_queen_attack_2 {

	public static void main(String args[])
	{
		int obs[][]= {};
		
		System.out.println(queensAttack(100000, 0, 4187, 5068, obs));
	}
	
	static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles) {
		int sum=0;
		
		int arr[][]=new int[n][n];
		
		for(int i=0;i<k;i++)
		{
			int r_o=obstacles[i][0];
			int c_o=obstacles[i][1];
			
			arr[r_o-1][c_o-1]=-1;
		}
		
		r_q=r_q-1;
		c_q=c_q-1;
		//check up and down
		for(int i=r_q;i<n;i++)
		{
			if(arr[i][c_q]==0)
				sum++;
			else
				break;
		}
		
		for(int i=r_q;i>=0;i--)
		{
			if(arr[i][c_q]==0)
				sum++;
			else
				break;
		}
		
		//check left and right
		for(int i=c_q;i<n;i++)
		{
			if(arr[r_q][i]==0)
				sum++;
			else
				break;
		}
		
		for(int i=c_q;i>=0;i--)
		{
			if(arr[r_q][i]==0)
				sum++;
			else
				break;
		}
		
		
		//check north_east
		for(int i=r_q,j=c_q;(i<n && j<n);i++,j++)
		{
			if(arr[i][j]==0)
				sum++;
			
			else
				break;
		}
		
		//south_west
		for(int i=r_q,j=c_q;(i>=0 && j>=0);i--,j--)
		{
			if(arr[i][j]==0)
				sum++;
			
			else
				break;
		}
		
		//check north_west
		for(int i=r_q,j=c_q;(i<n && j>=0);i++,j--)
		{
			if(arr[i][j]==0)
				sum++;
			
			else
				break;
		}
		
		//check south_east
		for(int i=r_q,j=c_q;(i>=0 && j<n);i--,j++)
		{
			if(arr[i][j]==0)
				sum++;
			
			else
				break;
		}
		
		return sum-8;

    }
	
}
