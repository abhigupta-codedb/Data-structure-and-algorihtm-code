package Practice;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;


public class queensAttack2 {

    // Complete the queensAttack function below.
    static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles) {
				int bx=0;
		
		//north
		for(int i=r_q;i<=n;i++)
		{
			bx+=1;
		}
		//south
		for(int i=r_q;i>=1;i--)
		{
			bx+=1;
		}
		//east
		for(int i=c_q;i<=n;i++)
		{
			bx+=1;
		}
		//west
		for(int i=c_q;i>=1;i--)
		{
			bx+=1;
		}
		//north-east
		int a=r_q;
		int b=c_q;
		while(a<=n && b<=n)
		{
			bx+=1;
			
			a++;
			b++;
		}		
		//north-west
		int c=c_q;
		int d=r_q;
		while(c>=1 && d<=n)
		{
			bx+=1;
					
			c--;
			d++;
		}
		//south-west
		int e=c_q;
		int f=r_q;
		while(e>=1 && f>=1)
		{
			bx+=1;
							
			e--;
			f--;
		}
		//south-east
		int g=c_q;
		int h=r_q;
		while(g<=n && h>=1)
		{
			bx+=1;
									
			g++;
			h--;
		}
		
		bx=bx-8;
//		System.out.println("total boxes "+bx);
		
		int rbx=0;
		for(int i=0;i<k;i++)
		{
			int r_o=obstacles[i][0];
			int c_o=obstacles[i][1];
				
			//if obstacle on +X or -X axis.
			if(c_q==c_o)
			{
				if(r_o>r_q) {
					
					for(int j=r_o;j<=n;j++)
						rbx++;
				}
				
				else
				{
					for(int j=r_o;j>=1;j--)
						rbx++;
				}
			}
			
			//if obstacle on +y or -y axis.
			else if(r_q==r_o)
			{
				if(c_o>c_q) {
					
					for(int j=c_o;j<=n;j++)
						rbx++;
				}
				
				else
				{
					for(int j=c_o;j>=1;j--)
						rbx++;
				}
			
			}
			
			//if obstacle in diagonal 
			else if (Math.abs(r_o-r_q)==Math.abs(c_o-c_q))
			{
				if(r_o>r_q) {
					
					for(int j=r_o;j<=n;j++)
						rbx++;
				}
				
				else
				{
					for(int j=r_o;j>=1;j--)
						rbx++;
				}
			}
			
			
		}
		
//		System.out.println("remove boxes "+rbx);

		
		return bx-rbx;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
//
//        String[] nk = scanner.nextLine().split(" ");
//
//        int n = Integer.parseInt(nk[0]);
//
//        int k = Integer.parseInt(nk[1]);
//
//        String[] r_qC_q = scanner.nextLine().split(" ");
//
//        int r_q = Integer.parseInt(r_qC_q[0]);
//
//        int c_q = Integer.parseInt(r_qC_q[1]);
//
    	  int k=0;
    	  int[][] obstacles = new int[k][2];
//
//        for (int i = 0; i < k; i++) {
//            String[] obstaclesRowItems = scanner.nextLine().split(" ");
//            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//            for (int j = 0; j < 2; j++) {
//                int obstaclesItem = Integer.parseInt(obstaclesRowItems[j]);
//                obstacles[i][j] = obstaclesItem;
//            }
//        }

        //int result = queensAttack(n, k, r_q, c_q, obstacles);
        
        System.out.println(queensAttack(8, 0, 4, 4, obstacles));

//        bufferedWriter.write(String.valueOf(result));
//        bufferedWriter.newLine();
//
//        bufferedWriter.close();
//
        scanner.close();
    }
}

