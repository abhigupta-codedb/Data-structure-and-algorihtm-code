package Practice;

public class biggerIsGreater {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str[]= {"lmno","dcba","dcbb","abdc","abcd","fedcbabcd"};
		
		for(String s:str)
		{
			get_word(s);
		}
		
		
				
	}
	
	
	static void get_word(String str)
	{
		int arr[]=new int[str.length()];
		int k=0;
		for(char c:str.toCharArray())
		{
			int num=c-96;
			arr[k]=num;
			k++;
		}
				
		int p=-1;            
	    for(int i=arr.length-2; i>=0; i--){
	        if(arr[i]<arr[i+1]){
	            p=i;
	            break;
	        }    
	    }
	    
	   // int nums[]=arr.clone();
	    
	    if(p==-1)
	    {
	    	System.out.println("no answer");
	    }
	    
	    else
	    {
	    	nextPermutation(arr);
	    	
	    	String out="";
	    	
	    	for(int a:arr)
	    	{
	    		char c=(char)(a+96);
	    		out+=c;
	    	}
	    	
	    	System.out.println(out);
	    }
	}
	
	public static void nextPermutation(int[] nums) {
	    if(nums == null || nums.length<2)
	        return;
	 
	    int p=0;            
	    for(int i=nums.length-2; i>=0; i--){
	        if(nums[i]<nums[i+1]){
	            p=i;
	            break;
	        }    
	    }
	 
	    int q = 0;
	    for(int i=nums.length-1; i>p; i--){
	        if(nums[i]> nums[p]){
	            q=i;
	            break;
	        }    
	    }
	 
	    if(p==0 && q==0){
	        reverse(nums, 0, nums.length-1);
	        return;
	    }
	 
	    int temp=nums[p];
	    nums[p]=nums[q];
	    nums[q]=temp;
	 
	    if(p<nums.length-1){
	        reverse(nums, p+1, nums.length-1);
	    }
	}
	 
	public static void reverse(int[] nums, int left, int right){
	    while(left<right){
	        int temp = nums[left];
	        nums[left]=nums[right];
	        nums[right]=temp;
	        left++;
	        right--;
	    }
	}

}
