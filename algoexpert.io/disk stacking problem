package Practice;
import java.util.ArrayList;
import java.util.Arrays;
public class diskStackingProblem {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<Integer[]> input=new ArrayList<>();
		
		Integer arr1[]= {2,1,2};
		Integer arr2[]= {3,2,3};
		Integer arr3[]= {2,2,8};
		Integer arr4[]= {2,3,4};
		Integer arr5[]= {1,3,1};
		Integer arr6[]= {4,4,5};
		
		input.add(arr1);input.add(arr2);input.add(arr3);input.add(arr4);input.add(arr5);input.add(arr6);
		
		
		
		for(Integer[] in:diskStacking(input)) {
			
			for(int a:in) {
				System.out.print(a+" ");
			}
			
			System.out.println();
		}
		
	}
	
	public static ArrayList<Integer[]> diskStacking(ArrayList<Integer[]> disks) {
	    // Write your code here.
		
		//ArrayList<Integer[]> out= new ArrayList<>();
		
		//sorting using lambda operator
		disks.sort((disk1,disk2)->disk1[2].compareTo(disk2[2]));
		
		
		int heights[]=new int[disks.size()];
		int k=0;
		for(Integer[] arr:disks) {
			heights[k++]=arr[2];
		}
		
		int sequences[]=new int[disks.size()];
		Arrays.fill(sequences, Integer.MIN_VALUE);
		
		int maxHeightIndex=0;
		
		for(int i=1;i<disks.size();i++) {
			Integer [] currentDisk=disks.get(i);
			for(int j=0;j<i;j++) {
				Integer [] otherDisk=disks.get(j);
				
				if(AreValidDisks(currentDisk,otherDisk)) 
				{
					if(heights[i]<=heights[j]+currentDisk[2]) 
					{
						heights[i]=heights[j]+currentDisk[2];
						sequences[i]=j;
					}
				}
			}
			
			if(heights[i]>heights[maxHeightIndex])
				maxHeightIndex=i;
		}

		return getSequence(disks, sequences, maxHeightIndex);
	  }
	
	static boolean AreValidDisks(Integer current[],Integer other[]) {
		
		if(other[0]<current[0]&&other[2]<current[2] && other[1]<current[1] )
			return true;
			
			return false;
	}
	
	static ArrayList<Integer[]> getSequence(ArrayList<Integer[]> disks,int []sequences,int maxIndex){
		ArrayList<Integer[]> out=new ArrayList<Integer[]>();
		
		while(maxIndex!=Integer.MIN_VALUE) {
			out.add(0, disks.get(maxIndex));
			maxIndex=sequences[maxIndex];
		}
		
		
		return out;
	}
}
