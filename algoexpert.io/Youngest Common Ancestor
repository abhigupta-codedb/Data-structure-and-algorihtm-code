package Practice;

public class youngestCommonAncestor {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			
	}
	
	
	public static AncestralTree getYoungestCommonAncestor(AncestralTree topAncestor,AncestralTree descendantOne,AncestralTree descendantTwo) 
	{
		// Write your code here.
		
		int depth_descOne=getDepth(descendantOne, topAncestor);
		int depth_descTwo=getDepth(descendantTwo, topAncestor);
		
		int diff=Math.abs(depth_descTwo-depth_descOne);
		
		if(depth_descOne>=depth_descTwo)
		{
			return backTrackAncestralTree(descendantOne,descendantTwo,diff);
		}
		
		else
			return backTrackAncestralTree(descendantTwo,descendantOne,diff);
	}
	
	
	static AncestralTree backTrackAncestralTree(AncestralTree lowerDescendent,AncestralTree higherDescendent,int diff)
	{
		while(diff>0)
		{
			lowerDescendent=lowerDescendent.ancestor;
			diff--;
		}
		
		while(lowerDescendent!=higherDescendent)
		{
			lowerDescendent=lowerDescendent.ancestor;
			higherDescendent=higherDescendent.ancestor;
		}
		
		
		return lowerDescendent;
	}
	
	static int getDepth(AncestralTree descendent,AncestralTree topAncestor)
	{
		int depth=0;
		
		while(descendent!=topAncestor)
		{
			descendent=descendent.ancestor;
			depth++;
		}
		
		return depth;
	}

	static class AncestralTree 
	{
		    
			public char name;
		    public AncestralTree ancestor;

		    AncestralTree(char name) {
		      this.name = name;
		      this.ancestor = null;
		    }

		    // This method is for testing only.
		    void addAsAncestor(AncestralTree[] descendants) {
		      for (AncestralTree descendant : descendants) {
		        descendant.ancestor = this;
		      }
		    }
	}
}
