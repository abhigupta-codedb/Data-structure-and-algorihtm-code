package Practice;

public class binaryHeap {
	
	public static void main(String args[])
	{
		int arr[]= {2,9,11,3,1,6,91};

		for(int i=0;i<arr.length;i++)
		{
			heapify(arr, i);
		}
		
		int end=arr.length-1;
		
		while(end>=0)
		{
			System.out.print(getMax(arr, end)+" ");
			end--;
			
		}
	}
	
	static void heapify(int arr[],int place)
	{
		if(place==0)
			return;
		
		while(place!=0)
		{
			
			int root=place/2;
			
			if(arr[root]<arr[place])
			{
				int temp=arr[root];
				arr[root]=arr[place];
				arr[place]=temp;
			}
			
			place=root;
		}
	}
	
	static int  getMax(int arr[], int end)
	{
		int ele=arr[0];
		
		arr[0]=arr[end];
		
		end--;
		
		percolateDown(arr, end);
		
		return ele;
	}
	
	static void percolateDown(int arr[],int end)
	{
		
		int place=0;
		
		
		while(place<=end)
		{
			int leftSib=2*place+1;
			int rightSib=2*place+2;
			int twoSwap=0;
			
			if(leftSib<=end && rightSib<=end)
			{
				if(arr[leftSib]>arr[rightSib])
					twoSwap=leftSib;
				else
					twoSwap=rightSib;
			}
			
			else if(leftSib<=end && rightSib>end)
				twoSwap=leftSib;
			
			else if(rightSib<=end && leftSib>end)
				twoSwap=rightSib;
			
			else
			{
				twoSwap=-1;
				break;
			}
			
			if(twoSwap!=-1)
			{
				int temp=arr[twoSwap];
				arr[twoSwap]=arr[place];
				arr[place]=temp;
				
				place=twoSwap;
			}
		}
	}
}

