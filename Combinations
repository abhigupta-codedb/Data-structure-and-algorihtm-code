package BacktrackMergeBinarySearch;

import java.util.*;
public class comb_order {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc =new Scanner(System.in);
		int max_sum=38;
		int tl_ed=8;
		
		String str="?8?????";
		
		char ch[]=str.toCharArray();
		
		int i=0;
		int elmt=0;
		
		for(char c:ch)
		{
			if(c!='?')
			{
				elmt=Integer.parseInt(String.valueOf(c));
				break;
			}
			
			i++;
		}
		
//		int arr[]=new int[7];
//		
//		arr[i]=elmt;
		
		ArrayList<List<Integer>> outlist=new ArrayList<List<Integer>>();
		ArrayList<Integer> templist=new ArrayList<Integer>();
		
		
		int inarr []=new int [tl_ed];
		
		for(int j=0;j<tl_ed;j++)
			inarr[j]=j+1;
		
		
		combination(inarr, 0, max_sum-elmt, templist, outlist);
		
		for(List<Integer> list:outlist)
		{
			Iterator<Integer> itr=list.iterator();
			int arr[]=new int[7];
			arr[i]=elmt;
			
			for(int k=0;k<7;k++)
			{
				if(k==i)
					continue;
				
				arr[k]=itr.next();
			}
			
			for(int a:arr)
				System.out.print(a+" ");
			System.out.println();
		}
		
		sc.close();
	}
	
	
	static void combination(int arr[],int start,int max_sum,ArrayList<Integer> templist,ArrayList<List<Integer>> outlist)
	{
		
		if(max_sum<0)
			return;
		
		else if(max_sum==0 && templist.size()==6)
		{
			
			outlist.add(new ArrayList<Integer>(templist));
			return;
		}
		
		while(start<arr.length && max_sum-arr[start]>=0)
		{
			templist.add(arr[start]);
			
			combination(arr, start, max_sum-arr[start], templist,outlist);
			start++;
			
			templist.remove(templist.size()-1);
		}
		
	}
}

