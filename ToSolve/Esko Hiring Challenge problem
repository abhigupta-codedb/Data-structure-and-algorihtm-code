/* IMPORTANT: Multiple classes and nested static classes are supported */

//uncomment this if you want to read input.
//imports for BufferedReader
import java.io.BufferedReader;
import java.io.InputStreamReader;

//import for Scanner and other utility classes
import java.util.*;


// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail

class TestClass {
    
    static class Relation{
        String first;
        String second;
        int n;
    }
    public static void main(String args[] ) throws Exception {
        /* Sample code to perform I/O:
         * Use either of these methods for input
        */
        
        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        // Write your code here
        String entities[]=br.readLine().split(",");
        int N=2*(entities.length-1);
        
        ArrayList<Relation> list=new ArrayList<>();
        ArrayList<Relation> outlist=new ArrayList<>();
        
        for(int i=0;i<N;i++){
            String line=br.readLine();
            String lines[]=line.split("=");
            if(lines.length<2)
                continue;
                
            String first=lines[0].trim();
            String second_part[]=lines[1].trim().split(" ");
            int num=Integer.parseInt(second_part[0]);
            String second=second_part[1];
            
            Relation r=new Relation();
            r.first=first;
            r.second=second;
            r.n=num;
            
            list.add(r);
        }
        
        for(int i=1;i<entities.length;i++){
            String first=entities[i-1];
            String second=entities[i];
            Relation out_r=null;
            boolean flag=false;
            
            for(Relation r:list){
                if(r.first.equals(first) && r.second.equals(second)){
                    flag=true;
                    out_r=r;
                    break;
                }
            }
            
            //relation present in-order.
            if(flag==true){
                outlist.add(out_r);
                continue;
            }
            
            //we need to make relation in-order.
            else{
                
            }
            
        }
        
        Relation r_n=outlist.get(0);
        int mul=r_n.n;
        for(int i=1;i<outlist.size();i++){
            r_n=outlist.get(i);
            r_n.n=r_n.n*mul;
            mul=r_n.n;
        }
        
        r_n=outlist.get(0);
        System.out.print("1"+r_n.first+" = "+r_n.n+r_n.second);
        
        for(int i=1;i<outlist.size();i++){
            Relation r_new=outlist.get(i);
            System.out.print(" = "+r_new.n+r_new.second);
        }
    }
}
