package Practice;

import java.util.*;

public class warnsDorffsAlgoKnightSteps {
	
	static class Cord
	{
		int x;
		int y;
	}
	
	static int count=1;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int board[][]=new int[8][8];
		
		int startx=0;
		int starty=0;
				
		// stores all visited steps
		ArrayList<Cord> vsteps=new ArrayList<Cord>();
		
		min_steps(board,startx,starty,vsteps);
		
		//print board
		for(int i=0;i<8;i++)
		{
			for(int j=0;j<8;j++)
				System.out.print(board[i][j]+"  ");
			
			System.out.println();
		}
		
	}
	

	private static void min_steps(int board[][],int startx, int starty,ArrayList<Cord> vsteps) {
		// TODO Auto-generated method stub
		
		//putting every visited point in visited list.
		Cord cadd=new Cord();
		cadd.x=startx;
		cadd.y=starty;
		vsteps.add(cadd);
		
		board[startx][starty]=count++;
		
		//if we reach end points storing steps required in arrayList
		ArrayList<Cord> arc=get_positions(startx,starty,vsteps);

		// going to end cord. from every possible coordinate
		for(Cord c:arc)
		{
			min_steps(board,c.x, c.y,vsteps);
		}
		
	}
	
	
	// getting all reachable coordinate from given startx, starty
	private static ArrayList<Cord> get_positions(int startx, int starty,ArrayList<Cord> vsteps) {
		// TODO Auto-generated method stub
		ArrayList<Cord> arc=new ArrayList<Cord>();
		
		int x[]= {1, 1, 2 , 2 ,-1 ,-1,-2, -2};
		int y[]= {2,-2, 1 ,-1 ,-2 , 2, 1, -1};
		
		for(int i=0;i<8;i++)
		{
			if(startx+x[i]<8 && startx+x[i]>=0)
			{
				if(starty+y[i]<8 && starty+y[i]>=0)
				{
					Cord c=new Cord();
					c.x=startx+x[i];
					c.y=starty+y[i];
					
					if(!contains(c, vsteps))
					{
						arc.add(c);
					}
				}
			}
		}
		
		return arc;
	}
	
	// tocheck weather a coordinates is already visited to avoid repeated work
	private static boolean contains(Cord c,ArrayList<Cord> vsteps)
	{
		for(Cord cv:vsteps)
		{
			if(cv.x==c.x && cv.y==c.y)
				return true;
			
		}
		
		return false;
	}

}
    
